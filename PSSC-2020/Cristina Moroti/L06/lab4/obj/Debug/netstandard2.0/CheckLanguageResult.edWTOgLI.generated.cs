// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using CSharp.Choices;
using System;
using System.Collections.Generic;
using System.Text;

namespace lab4.Question.Domain.AskQuestionWorkflow
{
    public static partial class CheckLanguageResult
    {
        public static ICheckLanguageResult Match(this ICheckLanguageResult self, System.Func<ValidReply, ICheckLanguageResult> whenValidReply, System.Func<InvalidReply, ICheckLanguageResult> whenInvalidReply, System.Func<ManualReview, ICheckLanguageResult> whenManualReview)
        {
            switch ((self))
            {
                case ValidReply validreply:
                    return whenValidReply(validreply);
                case InvalidReply invalidreply:
                    return whenInvalidReply(invalidreply);
                case ManualReview manualreview:
                    return whenManualReview(manualreview);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static async System.Threading.Tasks.Task<ICheckLanguageResult> MatchAsync(this ICheckLanguageResult self, System.Func<ValidReply, System.Threading.Tasks.Task<ICheckLanguageResult>> whenValidReply, System.Func<InvalidReply, System.Threading.Tasks.Task<ICheckLanguageResult>> whenInvalidReply, System.Func<ManualReview, System.Threading.Tasks.Task<ICheckLanguageResult>> whenManualReview)
        {
            switch ((self))
            {
                case ValidReply validreply:
                    return await whenValidReply(validreply);
                case InvalidReply invalidreply:
                    return await whenInvalidReply(invalidreply);
                case ManualReview manualreview:
                    return await whenManualReview(manualreview);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static R Match<R>(this ICheckLanguageResult self, System.Func<ValidReply, R> whenValidReply, System.Func<InvalidReply, R> whenInvalidReply, System.Func<ManualReview, R> whenManualReview)
        {
            switch ((self))
            {
                case ValidReply validreply:
                    return whenValidReply(validreply);
                case InvalidReply invalidreply:
                    return whenInvalidReply(invalidreply);
                case ManualReview manualreview:
                    return whenManualReview(manualreview);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static async System.Threading.Tasks.Task<R> MatchAsync<R>(this ICheckLanguageResult self, System.Func<ValidReply, System.Threading.Tasks.Task<R>> whenValidReply, System.Func<InvalidReply, System.Threading.Tasks.Task<R>> whenInvalidReply, System.Func<ManualReview, System.Threading.Tasks.Task<R>> whenManualReview)
        {
            switch ((self))
            {
                case ValidReply validreply:
                    return await whenValidReply(validreply);
                case InvalidReply invalidreply:
                    return await whenInvalidReply(invalidreply);
                case ManualReview manualreview:
                    return await whenManualReview(manualreview);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }
    }
}