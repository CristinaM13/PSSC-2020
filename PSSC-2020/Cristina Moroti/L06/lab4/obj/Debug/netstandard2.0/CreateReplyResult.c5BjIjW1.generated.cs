// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using CSharp.Choices;
using System;
using System.Collections.Generic;
using System.Text;

namespace lab4.Question.Domain.AskQuestionWorkflow
{
    public static partial class CreateReplyResult
    {
        public static ICreateReplyResult Match(this ICreateReplyResult self, System.Func<ReplyCreated, ICreateReplyResult> whenReplyCreated, System.Func<InvalidIdRequest, ICreateReplyResult> whenInvalidIdRequest)
        {
            switch ((self))
            {
                case ReplyCreated replycreated:
                    return whenReplyCreated(replycreated);
                case InvalidIdRequest invalididrequest:
                    return whenInvalidIdRequest(invalididrequest);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static async System.Threading.Tasks.Task<ICreateReplyResult> MatchAsync(this ICreateReplyResult self, System.Func<ReplyCreated, System.Threading.Tasks.Task<ICreateReplyResult>> whenReplyCreated, System.Func<InvalidIdRequest, System.Threading.Tasks.Task<ICreateReplyResult>> whenInvalidIdRequest)
        {
            switch ((self))
            {
                case ReplyCreated replycreated:
                    return await whenReplyCreated(replycreated);
                case InvalidIdRequest invalididrequest:
                    return await whenInvalidIdRequest(invalididrequest);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static R Match<R>(this ICreateReplyResult self, System.Func<ReplyCreated, R> whenReplyCreated, System.Func<InvalidIdRequest, R> whenInvalidIdRequest)
        {
            switch ((self))
            {
                case ReplyCreated replycreated:
                    return whenReplyCreated(replycreated);
                case InvalidIdRequest invalididrequest:
                    return whenInvalidIdRequest(invalididrequest);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static async System.Threading.Tasks.Task<R> MatchAsync<R>(this ICreateReplyResult self, System.Func<ReplyCreated, System.Threading.Tasks.Task<R>> whenReplyCreated, System.Func<InvalidIdRequest, System.Threading.Tasks.Task<R>> whenInvalidIdRequest)
        {
            switch ((self))
            {
                case ReplyCreated replycreated:
                    return await whenReplyCreated(replycreated);
                case InvalidIdRequest invalididrequest:
                    return await whenInvalidIdRequest(invalididrequest);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }
    }
}